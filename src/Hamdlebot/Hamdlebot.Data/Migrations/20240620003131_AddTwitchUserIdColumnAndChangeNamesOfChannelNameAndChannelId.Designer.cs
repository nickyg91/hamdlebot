// <auto-generated />
using System;
using Hamdlebot.Data.Contexts.Hamdlebot;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Hamdlebot.Data.Migrations
{
    [DbContext(typeof(HamdlebotContext))]
    [Migration("20240620003131_AddTwitchUserIdColumnAndChangeNamesOfChannelNameAndChannelId")]
    partial class AddTwitchUserIdColumnAndChangeNamesOfChannelNameAndChannelId
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Hamdlebot.Data.Contexts.Hamdlebot.Entities.BotChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<bool>("IsHamdleEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_hamdle_enabled");

                    b.Property<string>("TwitchChannelName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("twitch_channel_name");

                    b.Property<long>("TwitchUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("twitch_user_id");

                    b.HasKey("Id")
                        .HasName("pk_bot_channel");

                    b.HasIndex("TwitchUserId")
                        .IsUnique()
                        .HasAnnotation("idx_twitch_user_id_unique", "true");

                    b.ToTable("bot_channel", (string)null);
                });

            modelBuilder.Entity("Hamdlebot.Data.Contexts.Hamdlebot.Entities.BotChannelCommand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BotChannelId")
                        .HasColumnType("integer");

                    b.Property<string>("Command")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("command");

                    b.Property<DateTime>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("response");

                    b.HasKey("Id")
                        .HasName("pk_bot_channel_command");

                    b.HasIndex("BotChannelId");

                    b.ToTable("bot_channel_command", (string)null);
                });

            modelBuilder.Entity("Hamdlebot.Data.Contexts.Hamdlebot.Entities.BotChannelCommand", b =>
                {
                    b.HasOne("Hamdlebot.Data.Contexts.Hamdlebot.Entities.BotChannel", "BotChannel")
                        .WithMany("BotChannelCommands")
                        .HasForeignKey("BotChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasAnnotation("fk_bot_channel_command_bot_channel_id", "true");

                    b.Navigation("BotChannel");
                });

            modelBuilder.Entity("Hamdlebot.Data.Contexts.Hamdlebot.Entities.BotChannel", b =>
                {
                    b.Navigation("BotChannelCommands");
                });
#pragma warning restore 612, 618
        }
    }
}
